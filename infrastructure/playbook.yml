- name: Display Host Information
  hosts: remote

  tags:
    - debug

  tasks:
    - debug: var=ansible_all_ipv4_addresses
    - debug: var=ansible_default_ipv4.address
    - debug: var=ansible_version.full
    - debug: var=ansible_facts['python_version']

- name: Install Debugging Tools
  hosts: remote
  become: yes

  tags:
    - install

  tasks:
    - dnf:
        name: htop
        state: present

- name: Install Docker
  hosts: remote
  become: yes

  tags:
    - install
    - install-docker

  tasks:
    - dnf:
        name: docker
        state: present

    - user:
        name: "{{ ansible_env.SUDO_USER or ansible_user_id }}"
        groups: docker
        append: yes

    - meta: reset_connection

    - service:
        name: docker
        state: started
        enabled: yes

- name: Install Docker Compose
  hosts: remote
  become: yes

  tags:
    - install

  tasks:
    - get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system }}-{{ ansible_machine }}"
        dest: "/usr/libexec/docker/cli-plugins/docker-compose"
        mode: 0755

    - file:
        src: "/usr/libexec/docker/cli-plugins/docker-compose"
        dest: "/usr/bin/docker-compose"
        state: link

- name: Install ngrok
  hosts: remote

  tags:
    - install
    - install-ngrok

  vars_files:
    - variables.yml

  tasks:
    - stat:
        path: /usr/local/bin/ngrok
      register: ngrok

    - get_url:
        url: https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        dest: /tmp/ngrok-v3-stable-linux-amd64.tgz
      when: ngrok.stat.exists == false

    - unarchive:
        src: /tmp/ngrok-v3-stable-linux-amd64.tgz
        dest: /usr/local/bin
        remote_src: yes
        mode: 0755
      become: yes
      when: ngrok.stat.exists == false

    - file:
        path: /tmp/ngrok-v3-stable-linux-amd64.tgz
        state: absent

    - stat:
        path: /etc/systemd/system/ngrok.service
      register: ngrok_service

    - file:
        path: "{{ ngrok_config_path }}"
        state: directory

    - file:
        path: "{{ ngrok_config_path }}/ngrok.yml"
        state: touch
        modification_time: preserve
        access_time: preserve

    - command: ngrok service install --config "{{ ngrok_config_path }}/ngrok.yml"
      become: yes
      when: ngrok_service.stat.exists == false

- name: Configure Kafka
  hosts: remote

  tags:
    - configure
    - configure-kafka

  vars_files:
    - variables.yml

  tasks:
    - file:
        path: "{{ kafka_labs_path }}"
        state: directory

    - template:
        src: "../docker-compose.j2.yml"
        dest: "{{ kafka_labs_path }}/docker-compose.yml"

    - community.docker.docker_compose_v2:
        project_src: "{{ kafka_labs_path }}"
        remove_orphans: true

- name: Configure Spark
  hosts: remote

  tags:
    - configure
    - configure-spark

  vars_files:
    - variables.yml

  tasks:
    - file:
        path: "{{ spark_module_path }}"
        state: directory

    - copy:
        src: "../spark/spark-history-server-defaults.conf"
        dest: "{{ spark_module_path }}/spark-history-server-defaults.conf"

    - template:
        src: "../spark/docker-compose.j2.yml"
        dest: "{{ spark_module_path }}/docker-compose.yml"

    - community.docker.docker_compose_v2:
        project_src: "{{ spark_module_path }}"
        remove_orphans: true

- name: Configure ngrok
  hosts: remote

  tags:
    - configure
    - configure-ngrok

  vars_files:
    - secrets.yml
    - variables.yml

  tasks:
    - template:
        src: ngrok.yml
        dest: "{{ ngrok_config_path }}/ngrok.yml"
      register: config

    - shell: |
        set -eou pipefail
        ngrok service stop
        ngrok service start
      become: yes
      when: config.changed

    - uri:
        url: http://localhost:4040/api/tunnels
        method: GET
        return_content: yes
      register: tunnels

    - copy:
        content: "{{ tunnels.content }}"
        dest: "ngrok_tunnels.json"
      delegate_to: localhost
